
pipeline {
 agent any
 tools {
  maven 'maven3'
  jdk 'jdk8'
 }
 environment {
  // Need to install pipeline-utility-steps plugin
  DOCKER_FILE_PATH = "./ship/containerization/Dockerfile"
  DOCKER_BUILD_PATH = "."
  REGISTRY_ADDRESS = "crepo.cicd-rugged.home.labs"
  REGISTRY_CREDENTIALS_ID = "docker-registry-credentials"
  // yes | no
  USE_DOCKER_IMAGE_TAG_SHA256 = "yes"
  DOCKER_IMAGE_NAME = "${env.POM_ARTIFACT_ID}"
  //DOCKER_IMAGE_TAG = "${env.BUILD_RELEASE_VERSION}-${env.BUILD_NUMBER}"
  DOCKER_IMAGE_TAG_VERSION = "${env.BUILD_RELEASE_VERSION}"
  DOCKER_IMAGE_NAME_TAG_VERSION = "${env.DOCKER_IMAGE_NAME}:${env.DOCKER_IMAGE_TAG_VERSION}"
  DOCKER_IMAGE_NAME_TAG_LATEST = "${env.DOCKER_IMAGE_NAME}:latest"
  DOCKER_IMAGE_URI_VERSION = "${env.REGISTRY_ADDRESS}/${env.DOCKER_IMAGE_NAME_TAG_VERSION}"
  DOCKER_IMAGE_URI_LATEST = "${env.REGISTRY_ADDRESS}/${env.DOCKER_IMAGE_NAME_TAG_LATEST}"
  REGISTRY_URI = "https://${env.REGISTRY_ADDRESS}"
  // Generate REGISTRY_CREDENTIALS_USR and REGISTRY_CREDENTIALS_PSW
  REGISTRY_CREDENTIALS = credentials("${env.REGISTRY_CREDENTIALS_ID}")
  // #################################################
  K8S_TOKEN_ID = "k8s-admin"
  K8S_URI = "https://kubernetes:6443"
  K8S_CONTEXT_NAME = "kubernetes-context"
  K8S_CLUSTER_NAME = "kubernetes"
  K8S_NAMESPACE = "spring-boot-react-crud-integ"
  K8S_MANIFESTS_PATH = "./ship/k8s"

 }
 stages {
  stage('Docker Build & Push') {
   steps {
    sh 'echo "Docker Build & Push"'
    /**/
    script {
     // Build and push image with Jenkins' docker-plugin
     withDockerRegistry([credentialsId: "$REGISTRY_CREDENTIALS_ID", url: "$REGISTRY_URI"]) {
      def image = docker.build("$DOCKER_IMAGE_URI_VERSION", "-f $DOCKER_FILE_PATH $DOCKER_BUILD_PATH")
      if ("$USE_DOCKER_IMAGE_TAG_SHA256" == "yes") {
       // Get sha256 URI
       env.PUSHED_IMAGE_SHA256 = sh(returnStdout: true, script: '''docker push $DOCKER_IMAGE_URI_VERSION|grep sha256|awk {'print $3'}''').trim()
       env.DOCKER_IMAGE_NAME_TAG_SH256 = "${DOCKER_IMAGE_NAME}@${PUSHED_IMAGE_SHA256}"
       env.DOCKER_IMAGE_URI_SH256 = "${REGISTRY_ADDRESS}/${DOCKER_IMAGE_NAME_TAG_SH256}"
       env.DOCKER_IMAGE_URI = "${DOCKER_IMAGE_URI_SH256}"
      } else {
       // Push if no sha256 wanted 
       image.push()
       env.DOCKER_IMAGE_URI = "${DOCKER_IMAGE_URI_VERSION}"
      }

      // Push latest image tag
      sh returnStdout: true, script: '''docker tag $DOCKER_IMAGE_URI_VERSION $DOCKER_IMAGE_URI_LATEST'''
      sh returnStdout: true, script: '''docker push $DOCKER_IMAGE_URI_LATEST'''

      // Clean build images
      if (env.DOCKER_IMAGE_NAME) {
       sh '''
       docker images | grep "<none>" | awk {'print "docker rmi "$3'} | bash
       docker images | grep "$DOCKER_IMAGE_NAME" | grep "$DOCKER_IMAGE_TAG_VERSION" | awk {'print "docker rmi "$1":"$2'} | bash
       docker images | grep "$DOCKER_IMAGE_NAME" | grep latest | awk {'print "docker rmi "$1":"$2'} | bash
       '''
      }

     }
    } /**/
   }
  }

  stage('Deploy to K8S: Integration Environement') {
   /*
     Need to install Kubernetes CLI
     # To delete all images that are not referenced by a container
     docker image prune -a
   */
   steps {
    sh 'echo Deploy to K8S: Integration Environement'
    withKubeConfig([credentialsId: "$K8S_TOKEN_ID",
     serverUrl: "$K8S_URI",
     contextName: "$K8S_CONTEXT_NAME",
     clusterName: "$K8S_CLUSTER_NAME",
     namespace: "$K8S_NAMESPACE"
    ]) {
     script {
      try {
       //sh 'kubectl get serviceaccount'
       sh 'kubectl create secret docker-registry $K8S_DOCKER_IMAGE_SECRET_NAME --docker-server=$REGISTRY_ADDRESS --docker-username=$REGISTRY_CREDENTIALS_USR --docker-password=$REGISTRY_CREDENTIALS_PSW||true 2>/dev/null'

       // K8S manifests creation update
       if ("$USE_DOCKER_IMAGE_TAG_SHA256" == "yes") {
        sh 'echo true: $DOCKER_IMAGE_URI'
        // The below command can be executed when using sha256
        sh 'envsubst < $K8S_MANIFESTS_PATH/deployment.yaml|kubectl apply -f -'
       } else {
        sh 'echo false: $DOCKER_IMAGE_URI'
        // The below command can be executed when not using sha256, this require imagePullPolicy: Always
        env.IS_DEPLOYMENT_CHANGED = sh(returnStdout: true, script: '''envsubst < $K8S_MANIFESTS_PATH/deployment.yaml|kubectl apply -f -|awk {'print $2 '}''').trim()
        env.CURRENT_IMAGE_IN_K8S = sh(returnStdout: true, script: '''kubectl get deploy/$K8S_DEPLOYMENT_NAME -o jsonpath="{..image}"|head -n 1''').trim()
        // Force POD redeployment if not yet redeployed
        if ("$IS_DEPLOYMENT_CHANGED" == "unchanged" && "$CURRENT_IMAGE_IN_K8S" == "$DOCKER_IMAGE_URI_VERSION") {
         sh 'echo Restart $K8S_DEPLOYMENT_NAME'
         sh 'kubectl rollout restart deployment $K8S_DEPLOYMENT_NAME'
        } /**/
       }

       sh 'envsubst < $K8S_MANIFESTS_PATH/service.yaml|kubectl apply -f -'
       sh 'envsubst < $K8S_MANIFESTS_PATH/ingress.yaml|kubectl apply -f -'
      } catch (error) {
       sh 'echo Error K8S Changes'
      }
     }
    } 
   }
  }
  /* the end of stages */
 }
}